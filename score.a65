.include "score.h"

.bss
PlayerScoreDisplays:
MarioScoreDisplay: .res SIG_SCORE_LEN
LuigiScoreDisplay: .res SIG_SCORE_LEN

.segment "SBSS"
TopScoreDisplay: .res SIG_SCORE_LEN

.segment "MAIN"
.proc CheckTopScore ;C:whether top score is corrupt
	ldx #SIG_SCORE_LEN - 1;this is where we check for a warm boot
WBootCheck:
	lda TopScoreDisplay,x	;check each score digit in the top score
	cmp #10	;to see if we have a valid digit
	bcs Return 	;if not, give up and proceed with cold boot
	dex	
	bpl WBootCheck
Return:
	rts
.endproc

.proc UpdateTopScore
	ldx #SIG_SCORE_LEN - 1	;start with mario's score
	jsr TopScoreCheck
	ldx #SIG_SCORE_LEN + SIG_SCORE_LEN - 1	;now do luigi's score
	.proc TopScoreCheck
		ldy #SIG_SCORE_LEN - 1	;start with the lowest digit
		sec	
	GetScoreDiff:
		lda PlayerScoreDisplays,x ;subtract each player digit from each high score digit
		sbc TopScoreDisplay,y	;from lowest to highest, if any top score digit exceeds
		dex	;any player digit, borrow will be set until a subsequent
		dey	;subtraction clears it (player digit is higher than top)
		bpl GetScoreDiff	
		bcc NoTopSc	;check to see if borrow is still set, if so, no new high score
		inx	;increment X and Y once to the start of the score
		iny
	CopyScore:	
		lda PlayerScoreDisplays,x ;store player's score digits into high score memory area
		sta TopScoreDisplay,y
		inx
		iny
		cpy #SIG_SCORE_LEN	;do this until we have stored them all
		bcc CopyScore
	NoTopSc:
		rts
	.endproc
.endproc

