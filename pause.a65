.include "pause.h"

.bss
GamePauseStatus: .res 1
GamePauseTimer: .res 1
PauseModeFlag: .res 1

.scope "LIB"
.proc TickPause
	lda GamePauseTimer	;check if pause timer is still counting down
	beq :+
	dec GamePauseTimer     ;if so, decrement and leave
	rts
:
	lda SavedJoypad1Bits   ;check to see if start is pressed
	and #BUTTON_START      ;on controller 1
	beq ClrPauseTimer
	lda GamePauseStatus    ;check to see if timer flag is set
	and #%10000000         ;and if so, do not reset timer (residual,
	bne ExitPause          ;joypad reading routine makes this unnecessary)
	lda #$2b               ;set pause timer
	sta GamePauseTimer
	lda GamePauseStatus
	tay
	iny                    ;set pause sfx queue for next pause mode
	sty PauseSoundQueue
	eor #%00000001         ;invert d0 and set d7
	ora #%10000000
	bne SetPause           ;unconditional branch
ClrPauseTimer:
	lda GamePauseStatus	;clear timer flag if timer is at zero and start button
	and #%01111111         ;is not pressed
SetPause:
	sta GamePauseStatus
ExitPause:
	rts
.endproc

.proc TickPauseSound
    lda PauseSoundBuffer    ;check pause sfx buffer
    bne ContPau
    lda PauseSoundQueue    ;check pause queue
    beq SkipSoundSubroutines
    sta PauseSoundBuffer    ;if queue full, store in buffer and activate
    sta PauseModeFlag    ;pause mode to interrupt game sounds
    lda #$00    ;disable sound and clear sfx buffers
    sta apu::MASTERCTRL_REG
    sta Square1SoundBuffer
    sta Square2SoundBuffer
    sta NoiseSoundBuffer
    lda #$0f
    sta apu::MASTERCTRL_REG    ;enable sound again
    lda #$2a    ;store length of sound in pause counter
    sta Squ1_SfxLenCounter
PTone1F:
    lda #$44    ;play first tone
    bne PTRegC    ;unconditional branch
ContPau:
    lda Squ1_SfxLenCounter    ;check pause length left
    cmp #$24    ;time to play second?
    beq PTone2F
    cmp #$1e    ;time to play first again?
    beq PTone1F
    cmp #$18    ;time to play second again?
    bne DecPauC    ;only load regs during times, otherwise skip
PTone2F:
    lda #$64    ;store reg contents and play the pause sfx
PTRegC:
    ldx #$84
    ldy #$7f
    jsr PlaySqu1Sfx
DecPauC:
    dec Squ1_SfxLenCounter    ;decrement pause sfx counter
    bne SkipSoundSubroutines
    lda #$00    ;disable sound if in pause mode and
    sta apu::MASTERCTRL_REG    ;not currently playing the pause sfx
    lda PauseSoundBuffer    ;if no longer playing pause sfx, check to see
    cmp #$02    ;if we need to be playing sound again
    bne SkipPIn
    lda #$00    ;clear pause mode to allow game sounds again
    sta PauseModeFlag
SkipPIn:
    lda #$00    ;clear pause sfx buffer
    sta PauseSoundBuffer
    rts
.endproc

